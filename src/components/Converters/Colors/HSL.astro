---

---

<section id="hsl-converter" class="flex flex-col gap-4">
    <div class="flex flex-row gap-4">
        <div class="flex flex-col items-start gap-4">
            <label for="hslInputRgb" class="">HSL to RGB</label>
            <input class="rounded-lg px-4 py-2 text-black" type="text" id="hslInputRgb" placeholder="hsl(360, 100%, 100%)">
            <button class="rounded-lg bg-[#1d5b00] px-6 py-2.5" id="convertHslToRgbButton">Convert</button>
            <div id="rgbFromHslOutput" class=""></div>
        </div>
        <div class="flex flex-col items-start gap-4">
            <label for="hslInputHex" class="">HSL to Hex</label>
            <input class="rounded-lg px-4 py-2 text-black" type="text" id="hslInputHex" placeholder="hsl(360, 100%, 100%)">
            <button class="rounded-lg bg-[#1d5b00] px-6 py-2.5" id="convertHslToHexButton">Convert</button>
            <div id="hexFromHslOutput" class=""></div>
        </div>
    </div>
</section>

<script>
// @ts-nocheck

function initHslConverter() {
    // Función para convertir HSL a RGB
    function hslToRgb(h, s, l) {
        s /= 100;
        l /= 100;
        const k = n => (n + h / 30) % 12;
        const a = s * Math.min(l, 1 - l);
        const f = n => l - a * Math.max(Math.min(k(n) - 3, 9 - k(n), 1), -1);
        return [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    }

    // Conversión de HSL a RGB
    document.getElementById("convertHslToRgbButton").addEventListener("click", function() {
        let hslInput = document.getElementById("hslInputRgb").value.trim(); // Eliminar espacios al inicio y al final
        const hslRegex = /hsl\(\s*(\d{1,3})\s*[,\s]\s*(\d{1,3})%\s*[,\s]\s*(\d{1,3})%\s*\)/;
        const match = hslInput.match(hslRegex);
        const rgbOutput = document.getElementById("rgbFromHslOutput");

        if (match) {
            const h = parseInt(match[1]);
            const s = parseInt(match[2]);
            const l = parseInt(match[3]);

            const [r, g, b] = hslToRgb(h, s, l);
            rgbOutput.innerHTML = `RGB: rgb(${r}, ${g}, ${b})`;
        } else {
            rgbOutput.innerHTML = "Invalid HSL color format.";
        }
    });

    // Conversión de HSL a Hex
    document.getElementById("convertHslToHexButton").addEventListener("click", function() {
        let hslInput = document.getElementById("hslInputHex").value.trim(); // Eliminar espacios al inicio y al final
        const hslRegex = /hsl\(\s*(\d{1,3})\s*[,\s]\s*(\d{1,3})%\s*[,\s]\s*(\d{1,3})%\s*\)/;
        const hexOutput = document.getElementById("hexFromHslOutput");

        if (hslRegex.test(hslInput)) {
            const match = hslInput.match(hslRegex);
            const h = parseInt(match[1]);
            const s = parseInt(match[2]);
            const l = parseInt(match[3]);

            const [r, g, b] = hslToRgb(h, s, l);
            const hex = `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()}`;
            hexOutput.innerHTML = `Hex: ${hex}`;
        } else {
            hexOutput.innerHTML = "Invalid HSL color format.";
        }
    });
}

// Inicializar el convertidor HSL
initHslConverter();
</script>
