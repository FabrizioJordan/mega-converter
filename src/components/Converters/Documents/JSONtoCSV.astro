---
---

<section class="flex flex-col gap-4 justify-start items-start text-white">
  <h3 class="converterTitle">Convert JSON to CSV Online and Free!</h3>

  <article class="w-full">
    <div class="file-select flex flex-col justify-center items-stretch" id="src-file1">
      <span>JSON File</span>
      <input
        type="file"
        class="fancy-file hidden"
        id="fileInput"
        name="src-file1"
        accept=".json"
        data-button="Select"
        data-empty="No file"
        multiple
      />
    </div>
  </article>

  <p id="errorText" class="text-red-500 hidden">Error message will appear here.</p>
  
  <button
    id="btn"  
    class="px-6 py-2.5 transition-colors duration-300 text-[#ffffff] bg-[#00000024] hover:bg-[#2a2a2a] border border-[#4c4c4c99] rounded-3xl flex flex-row gap-2 justify-center items-center disabled:bg-[#272727] disabled:text-[#bbbbbb] disabled:cursor-not-allowed"
    disabled>Download CSV</button>
</section>

<script>
  // @ts-nocheck
  document.addEventListener("astro:page-load", () => {
    function create(tagName) {
      return document.createElement(tagName);
    }

    let csvData = ""; // Variable para almacenar el CSV generado
    let uploadedFileName = ""; // Variable para almacenar el nombre del archivo cargado

    const fileInput = document.getElementById("fileInput");
    if (fileInput) {
      fileInput.addEventListener("change", handleFileSelect);
    }

    function handleFileSelect(event) {
      const file = event.target.files[0];
      const errorText = document.getElementById("errorText");
      errorText.classList.add("hidden"); // Oculta el mensaje de error al seleccionar un archivo

      if (file) {
        uploadedFileName = file.name.replace(/\.[^/.]+$/, ""); // Guarda el nombre del archivo sin la extensión
        const reader = new FileReader();
        reader.onload = function (e) {
          const result = e.target.result;

          if (typeof result === "string") {
            try {
              const json = JSON.parse(result); // Intenta parsear el archivo como JSON
              const arrayData = findFirstArrayOrObject(json); // Busca el primer array u objeto en cualquier parte del JSON

              if (arrayData) {
                handle(arrayData); // Convierte el array u objeto encontrado a CSV
                document.getElementById("btn").removeAttribute("disabled"); // Habilita el botón si el archivo es válido
              } else {
                errorText.textContent = "Invalid JSON structure. No array or object found.";
                errorText.classList.remove("hidden"); // Muestra el mensaje de error
                document.getElementById("btn").setAttribute("disabled", "disabled"); // Deshabilita el botón si no se encuentra un array u objeto
              }
            } catch (error) {
              errorText.textContent = "Invalid JSON file. Please select a valid JSON file.";
              errorText.classList.remove("hidden"); // Muestra el mensaje de error
              document.getElementById("btn").setAttribute("disabled", "disabled"); // Deshabilita el botón si el JSON no es válido
            }
          } else {
            errorText.textContent = "Error reading file. Expected a string.";
            errorText.classList.remove("hidden"); // Muestra el mensaje de error
          }
        };
        reader.readAsText(file); // Lee el archivo como texto
      }
    }

    // Encuentra el primer array o maneja objetos en el JSON
    function findFirstArrayOrObject(obj) {
      if (Array.isArray(obj)) {
        return obj; // Si el objeto en sí es un array, devolverlo
      }
      if (typeof obj === "object" && obj !== null) {
        for (const key in obj) {
          if (Array.isArray(obj[key])) {
            return obj[key]; // Si se encuentra un array en alguna clave, devolverlo
          } else if (typeof obj[key] === "object") {
            return obj[key]; // Si se encuentra un objeto, devolverlo
          }
        }
        return obj; // Si es un objeto plano sin arrays, devolverlo directamente
      }
      return null; // Si no se encuentra ni un array ni un objeto
    }

    // Convierte el JSON a CSV
    function handle(data) {
      const errorText = document.getElementById("errorText");

      if (Array.isArray(data) && data.length > 0 && typeof data[0] === "object") {
        const headers = Object.keys(data[0]).join(", ");
        const main = data.map((item) =>
          Object.values(item)
            .map((value) => `"${value}"`)
            .join(", ")
        );
        csvData = [headers, ...main].join("\n");
      } else if (typeof data === "object" && data !== null) {
        const keys = Object.keys(data);
        const headers = ["ID", ...Object.keys(data[keys[0]])].join(", ");
        const main = keys.map((key) => {
          const values = Object.values(data[key]).map((value) => `"${value}"`);
          return `"${key}", ${values.join(", ")}`;
        });
        csvData = [headers, ...main].join("\n");
      } else {
        errorText.textContent = "Invalid JSON structure. The array or object should contain valid data.";
        errorText.classList.remove("hidden"); // Muestra el mensaje de error
        document.getElementById("btn").setAttribute("disabled", "disabled");
      }
    }

    const btn = document.getElementById("btn");
    if (btn) {
      btn.addEventListener("click", () => {
        if (csvData) {
          startCSVDownload(csvData); // Llama a la función de descarga si el CSV está generado
        } else {
          const errorText = document.getElementById("errorText");
          errorText.textContent = "No CSV data available. Please select a JSON file first.";
          errorText.classList.remove("hidden"); // Muestra el mensaje de error
        }
      });
    }

    function startCSVDownload(csv) {
      const blob = new Blob([csv], { type: "text/csv" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = `${uploadedFileName}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);

      URL.revokeObjectURL(url);
    }

    const files = document.querySelectorAll(".fancy-file");
    Array.from(files).forEach((f) => {
      const inputFile = f;
      const label = create("label");
      const span_text = create("span");
      const span_name = create("span");
      const span_button = create("span");

      label.htmlFor = inputFile.id;

      span_text.className = "fancy-file__fancy-file-name";
      span_button.className = "fancy-file__fancy-file-button";

      span_name.innerHTML = inputFile.dataset.empty || "No file selected";
      span_button.innerHTML = inputFile.dataset.button || "Browse";

      label.appendChild(span_text);
      label.appendChild(span_button);
      span_text.appendChild(span_name);
      inputFile.parentNode?.appendChild(label);

      span_name.style.width = span_text.clientWidth - 30 + "px";

      inputFile.addEventListener("change", (e) => {
        if (inputFile.files?.length === 0) {
          span_name.innerHTML = inputFile.dataset.empty || "No file selected";
        } else if (inputFile.files?.length > 1) {
          span_name.innerHTML = inputFile.files.length + " files selected";
        } else {
          span_name.innerHTML = inputFile.files?.[0].name;
        }
      });
    });
  });
</script>

<style is:inline>
  @tailwind base;

  .fancy-file + label {
    display: flex;
    flex: 1;
  }
  .fancy-file__fancy-file-name,
  .fancy-file__fancy-file-button {
    padding: 0.5em 1em;
  }

  .fancy-file__fancy-file-name {
    background: #242424;
    border: 1px solid #3d3d3d;
    flex: 1;
    border-radius: 8px 0 0 8px;
  }

  .fancy-file__fancy-file-name span {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    width: 0px;
    display: block;
  }

  .fancy-file__fancy-file-button {
    background: #1d5b00;
    border: 1px solid #3d3d3d;
    color: white;
    white-space: nowrap;
    border-radius: 0 8px 8px 0;
    border-left: none;
  }

  .fancy-file {
    display: none;
  }
</style>
